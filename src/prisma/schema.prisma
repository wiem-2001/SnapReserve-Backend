// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                     String    @id @default(cuid())
  full_name              String?
  email                  String    @unique
  password_hash          String? 
  phone                  String? 
  role                   String
  created_at             DateTime? @default(now())
  updated_at             DateTime? @updatedAt
  verification_token     String?   @db.Text
  is_verified            Boolean?  @default(false)
  password_reset_token   String?
  password_reset_expires DateTime?
  google_id              String?
  facebook_id            String?
  events                 events[]
  profile_image          String? 
  gender                 String?
  birth_date             DateTime?
  tickets                Ticket[]
  failedAttempts         FailedPaymentAttempt[]
  notifications          Notification[]

}

model events {
  id            String           @id @default(cuid())
  title         String
  category      String
  description   String
  image         String
  ownerId       String
  owner         users           @relation(fields: [ownerId], references: [id])

  dates         eventDate[]      
  pricingTiers  pricingTier[]
  tickets       Ticket[]

  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model eventDate {
  id            String   @id @default(cuid())
  date          DateTime
  location      String
  eventId       String
  event         events    @relation(fields: [eventId], references: [id] , onDelete: Cascade)
}

model pricingTier {
  id            String    @id @default(cuid())
  name          String
  price         Float
  capacity      Int       
  eventId       String
  event         events    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tickets       Ticket[]  
}

model Ticket {
  id              String        @id @default(uuid())
  user            users         @relation(fields: [userId], references: [id])
  userId          String

  event           events        @relation(fields: [eventId], references: [id])
  eventId         String

  tier            pricingTier   @relation(fields: [tierId], references: [id],onDelete: Cascade)
  tierId          String

  date            DateTime
  stripeSessionId String?

  qrCodeUrl       String?
  pdfUrl          String?

  createdAt       DateTime      @default(now())
  uuid            String   @unique
}

model FailedPaymentAttempt {
  id        String   @id @default(cuid())
  user      users    @relation(fields: [userId], references: [id])
  userId    String
  sessionId String   
  eventId   String? 
  reason    String?  
  createdAt DateTime @default(now())
}

model Notification {
  id        String      @id @default(uuid())
  userId    String
  message   String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)

  user      users    @relation(fields: [userId], references: [id])

  @@index([userId])
}


